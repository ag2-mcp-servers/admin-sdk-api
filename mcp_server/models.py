# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:41:11+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class Alias(BaseModel):
    alias: Optional[str] = None
    etag: Optional[str] = None
    id: Optional[str] = None
    kind: Optional[str] = 'admin#directory#alias'
    primaryEmail: Optional[str] = None


class Aliases(BaseModel):
    aliases: Optional[List] = None
    etag: Optional[str] = None
    kind: Optional[str] = 'admin#directory#aliases'


class Asp(BaseModel):
    codeId: Optional[int] = Field(None, description='The unique ID of the ASP.')
    creationTime: Optional[str] = Field(
        None,
        description='The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.',
    )
    etag: Optional[str] = Field(None, description='ETag of the ASP.')
    kind: Optional[str] = Field(
        'admin#directory#asp',
        description='The type of the API resource. This is always `admin#directory#asp`.',
    )
    lastTimeUsed: Optional[str] = Field(
        None,
        description='The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the application that the user, represented by their `userId`, entered when the ASP was created.',
    )
    userKey: Optional[str] = Field(
        None, description='The unique ID of the user who issued the ASP.'
    )


class Asps(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    items: Optional[List[Asp]] = Field(None, description='A list of ASP resources.')
    kind: Optional[str] = Field(
        'admin#directory#aspList',
        description='The type of the API resource. This is always `admin#directory#aspList`.',
    )


class Severity(Enum):
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    SEVERITY_INFO = 'SEVERITY_INFO'
    SEVERITY_WARNING = 'SEVERITY_WARNING'
    SEVERITY_ERROR = 'SEVERITY_ERROR'


class AuxiliaryMessage(BaseModel):
    auxiliaryMessage: Optional[str] = Field(
        None,
        description='Human readable message in English. Example: "Given printer is invalid or no longer supported."',
    )
    fieldMask: Optional[str] = Field(
        None, description='Field that this message concerns.'
    )
    severity: Optional[Severity] = Field(None, description='Message severity')


class BatchDeletePrintServersRequest(BaseModel):
    printServerIds: Optional[List[str]] = Field(
        None,
        description='A list of print server IDs that should be deleted (max `100` per batch).',
    )


class BatchDeletePrintersRequest(BaseModel):
    printerIds: Optional[List[str]] = Field(
        None,
        description='A list of Printer.id that should be deleted. Max 100 at a time.',
    )


class BuildingAddress(BaseModel):
    addressLines: Optional[List[str]] = Field(
        None,
        description='Unstructured address lines describing the lower levels of an address.',
    )
    administrativeArea: Optional[str] = Field(
        None,
        description='Optional. Highest administrative subdivision which is used for postal addresses of a country or region.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Optional. BCP-47 language code of the contents of this address (if known).',
    )
    locality: Optional[str] = Field(
        None,
        description='Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.',
    )
    postalCode: Optional[str] = Field(
        None, description='Optional. Postal code of the address.'
    )
    regionCode: Optional[str] = Field(
        None,
        description='Required. CLDR region code of the country/region of the address.',
    )
    sublocality: Optional[str] = Field(
        None, description='Optional. Sublocality of the address.'
    )


class BuildingCoordinates(BaseModel):
    latitude: Optional[float] = Field(None, description='Latitude in decimal degrees.')
    longitude: Optional[float] = Field(
        None, description='Longitude in decimal degrees.'
    )


class CalendarResource(BaseModel):
    buildingId: Optional[str] = Field(
        None, description='Unique ID for the building a resource is located in.'
    )
    capacity: Optional[int] = Field(
        None, description='Capacity of a resource, number of seats in a room.'
    )
    etags: Optional[str] = Field(None, description='ETag of the resource.')
    featureInstances: Optional[Any] = Field(
        None, description='Instances of features for the calendar resource.'
    )
    floorName: Optional[str] = Field(
        None, description='Name of the floor a resource is located on.'
    )
    floorSection: Optional[str] = Field(
        None, description='Name of the section within a floor a resource is located in.'
    )
    generatedResourceName: Optional[str] = Field(
        None,
        description='The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, "NYC-2-Training Room 1A (16)".',
    )
    kind: Optional[str] = Field(
        'admin#directory#resources#calendars#CalendarResource',
        description='The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`.',
    )
    resourceCategory: Optional[str] = Field(
        None,
        description='The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.',
    )
    resourceDescription: Optional[str] = Field(
        None, description='Description of the resource, visible only to admins.'
    )
    resourceEmail: Optional[str] = Field(
        None,
        description='The read-only email for the calendar resource. Generated as part of creating a new calendar resource.',
    )
    resourceId: Optional[str] = Field(
        None, description='The unique ID for the calendar resource.'
    )
    resourceName: Optional[str] = Field(
        None,
        description='The name of the calendar resource. For example, "Training Room 1A".',
    )
    resourceType: Optional[str] = Field(
        None,
        description='The type of the calendar resource, intended for non-room resources.',
    )
    userVisibleDescription: Optional[str] = Field(
        None, description='Description of the resource, visible to users and admins.'
    )


class CalendarResources(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    items: Optional[List[CalendarResource]] = Field(
        None, description='The CalendarResources in this page of results.'
    )
    kind: Optional[str] = Field(
        'admin#directory#resources#calendars#calendarResourcesList',
        description='Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.',
    )


class Channel(BaseModel):
    address: Optional[str] = Field(
        None,
        description='The address where notifications are delivered for this channel.',
    )
    expiration: Optional[str] = Field(
        None,
        description='Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.',
    )
    id: Optional[str] = Field(
        None,
        description='A UUID or similar unique string that identifies this channel.',
    )
    kind: Optional[str] = Field(
        'api#channel',
        description='Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.',
    )
    params: Optional[Dict[str, str]] = Field(
        None,
        description='Additional parameters controlling delivery channel behavior. Optional. For example, `params.ttl` specifies the time-to-live in seconds for the notification channel, where the default is 2 hours and the maximum TTL is 2 days.',
    )
    payload: Optional[bool] = Field(
        None,
        description='A Boolean value to indicate whether payload is wanted. Optional.',
    )
    resourceId: Optional[str] = Field(
        None,
        description='An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.',
    )
    resourceUri: Optional[str] = Field(
        None, description='A version-specific identifier for the watched resource.'
    )
    token: Optional[str] = Field(
        None,
        description='An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.',
    )
    type: Optional[str] = Field(
        None, description='The type of delivery mechanism used for this channel.'
    )


class ActiveTimeRange(BaseModel):
    activeTime: Optional[int] = Field(
        None, description='Duration of usage in milliseconds.'
    )
    date: Optional[date_aliased] = Field(None, description='Date of usage')


class CState(BaseModel):
    displayName: Optional[str] = Field(None, description='Name of the state.')
    sessionDuration: Optional[str] = Field(
        None, description='Time spent in the state since the last reboot.'
    )


class LogicalCpu(BaseModel):
    cStates: Optional[List[CState]] = Field(
        None,
        description='C-States indicate the power consumption state of the CPU. For more information look at documentation published by the CPU maker.',
    )
    currentScalingFrequencyKhz: Optional[int] = Field(
        None, description='Current frequency the CPU is running at.'
    )
    idleDuration: Optional[str] = Field(None, description='Idle time since last boot.')
    maxScalingFrequencyKhz: Optional[int] = Field(
        None, description='Maximum frequency the CPU is allowed to run at, by policy.'
    )


class CpuInfoItem(BaseModel):
    architecture: Optional[str] = Field(None, description='The CPU architecture.')
    logicalCpus: Optional[List[LogicalCpu]] = Field(
        None, description='Information for the Logical CPUs'
    )
    maxClockSpeedKhz: Optional[int] = Field(
        None, description='The max CPU clock speed in kHz.'
    )
    model: Optional[str] = Field(None, description='The CPU model name.')


class CpuTemperatureInfoItem(BaseModel):
    label: Optional[str] = Field(None, description='CPU label')
    temperature: Optional[int] = Field(
        None, description='Temperature in Celsius degrees.'
    )


class CpuStatusReport(BaseModel):
    cpuTemperatureInfo: Optional[List[CpuTemperatureInfoItem]] = Field(
        None, description='A list of CPU temperature samples.'
    )
    cpuUtilizationPercentageInfo: Optional[List[int]] = None
    reportTime: Optional[datetime] = Field(
        None, description='Date and time the report was received.'
    )


class DeprovisionReason(Enum):
    deprovisionReasonUnspecified = 'deprovisionReasonUnspecified'
    deprovisionReasonSameModelReplacement = 'deprovisionReasonSameModelReplacement'
    deprovisionReasonUpgrade = 'deprovisionReasonUpgrade'
    deprovisionReasonDomainMove = 'deprovisionReasonDomainMove'
    deprovisionReasonServiceExpiration = 'deprovisionReasonServiceExpiration'
    deprovisionReasonOther = 'deprovisionReasonOther'
    deprovisionReasonDifferentModelReplacement = (
        'deprovisionReasonDifferentModelReplacement'
    )
    deprovisionReasonRetiringDevice = 'deprovisionReasonRetiringDevice'
    deprovisionReasonUpgradeTransfer = 'deprovisionReasonUpgradeTransfer'
    deprovisionReasonNotRequired = 'deprovisionReasonNotRequired'
    deprovisionReasonRepairCenter = 'deprovisionReasonRepairCenter'


class DeviceFile(BaseModel):
    createTime: Optional[datetime] = Field(
        None, description='Date and time the file was created'
    )
    downloadUrl: Optional[str] = Field(None, description='File download URL')
    name: Optional[str] = Field(None, description='File name')
    type: Optional[str] = Field(None, description='File type')


class VolumeInfoItem(BaseModel):
    storageFree: Optional[str] = Field(None, description='Free disk space [in bytes]')
    storageTotal: Optional[str] = Field(None, description='Total disk space [in bytes]')
    volumeId: Optional[str] = Field(None, description='Volume id')


class DiskVolumeReport(BaseModel):
    volumeInfo: Optional[List[VolumeInfoItem]] = Field(None, description='Disk volumes')


class LastKnownNetworkItem(BaseModel):
    ipAddress: Optional[str] = Field(None, description='The IP address.')
    wanIpAddress: Optional[str] = Field(None, description='The WAN IP address.')


class RecentUser(BaseModel):
    email: Optional[str] = Field(
        None,
        description="The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`.",
    )
    type: Optional[str] = Field(None, description='The type of the user.')


class ScreenshotFile(BaseModel):
    createTime: Optional[datetime] = Field(
        None, description='Date and time the file was created'
    )
    downloadUrl: Optional[str] = Field(None, description='File download URL')
    name: Optional[str] = Field(None, description='File name')
    type: Optional[str] = Field(None, description='File type')


class SystemRamFreeReport(BaseModel):
    reportTime: Optional[datetime] = Field(
        None, description='Date and time the report was received.'
    )
    systemRamFreeInfo: Optional[List[str]] = None


class TpmVersionInfo(BaseModel):
    family: Optional[str] = Field(
        None,
        description='TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: "1.2" -> 312e3200 TPM 2.0: "2.0" -> 322e3000',
    )
    firmwareVersion: Optional[str] = Field(None, description='TPM firmware version.')
    manufacturer: Optional[str] = Field(None, description='TPM manufacturer code.')
    specLevel: Optional[str] = Field(
        None,
        description='TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2.',
    )
    tpmModel: Optional[str] = Field(None, description='TPM model number.')
    vendorSpecific: Optional[str] = Field(
        None, description='Vendor-specific information such as Vendor ID.'
    )


class ChromeOsDeviceAction(BaseModel):
    action: Optional[str] = Field(
        None, description='Action to be taken on the Chrome OS device.'
    )
    deprovisionReason: Optional[str] = Field(
        None,
        description='Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on licenses for perpetual subscription customers.',
    )


class ChromeOsMoveDevicesToOu(BaseModel):
    deviceIds: Optional[List[str]] = Field(
        None, description='Chrome OS devices to be moved to OU'
    )


class CustomerPostalAddress(BaseModel):
    addressLine1: Optional[str] = Field(
        None,
        description="A customer's physical address. The address can be composed of one to three lines.",
    )
    addressLine2: Optional[str] = Field(
        None, description='Address line 2 of the address.'
    )
    addressLine3: Optional[str] = Field(
        None, description='Address line 3 of the address.'
    )
    contactName: Optional[str] = Field(None, description="The customer contact's name.")
    countryCode: Optional[str] = Field(
        None,
        description='This is a required property. For `countryCode` information see the [ISO 3166 country code elements](https://www.iso.org/iso/country_codes.htm).',
    )
    locality: Optional[str] = Field(
        None,
        description='Name of the locality. An example of a locality value is the city of `San Francisco`.',
    )
    organizationName: Optional[str] = Field(
        None, description='The company or company division name.'
    )
    postalCode: Optional[str] = Field(
        None,
        description='The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.',
    )
    region: Optional[str] = Field(
        None,
        description='Name of the region. An example of a region value is `NY` for the state of New York.',
    )


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    EXPIRED = 'EXPIRED'
    CANCELLED = 'CANCELLED'
    SENT_TO_CLIENT = 'SENT_TO_CLIENT'
    ACKED_BY_CLIENT = 'ACKED_BY_CLIENT'
    EXECUTED_BY_CLIENT = 'EXECUTED_BY_CLIENT'


class Type(Enum):
    COMMAND_TYPE_UNSPECIFIED = 'COMMAND_TYPE_UNSPECIFIED'
    REBOOT = 'REBOOT'
    TAKE_A_SCREENSHOT = 'TAKE_A_SCREENSHOT'
    SET_VOLUME = 'SET_VOLUME'
    WIPE_USERS = 'WIPE_USERS'
    REMOTE_POWERWASH = 'REMOTE_POWERWASH'
    DEVICE_START_CRD_SESSION = 'DEVICE_START_CRD_SESSION'
    CAPTURE_LOGS = 'CAPTURE_LOGS'


class Result(Enum):
    COMMAND_RESULT_TYPE_UNSPECIFIED = 'COMMAND_RESULT_TYPE_UNSPECIFIED'
    IGNORED = 'IGNORED'
    FAILURE = 'FAILURE'
    SUCCESS = 'SUCCESS'


class DirectoryChromeosdevicesCommandResult(BaseModel):
    commandResultPayload: Optional[str] = Field(
        None,
        description='The payload for the command result. The following commands respond with a payload: * `DEVICE_START_CRD_SESSION`: Payload is a stringified JSON object in the form: { "url": url }. The URL provides a link to the Chrome Remote Desktop session.',
    )
    errorMessage: Optional[str] = Field(
        None,
        description='The error message with a short explanation as to why the command failed. Only present if the command failed.',
    )
    executeTime: Optional[str] = Field(
        None,
        description='The time at which the command was executed or failed to execute.',
    )
    result: Optional[Result] = Field(None, description='The result of the command.')


class CommandType(Enum):
    COMMAND_TYPE_UNSPECIFIED = 'COMMAND_TYPE_UNSPECIFIED'
    REBOOT = 'REBOOT'
    TAKE_A_SCREENSHOT = 'TAKE_A_SCREENSHOT'
    SET_VOLUME = 'SET_VOLUME'
    WIPE_USERS = 'WIPE_USERS'
    REMOTE_POWERWASH = 'REMOTE_POWERWASH'
    DEVICE_START_CRD_SESSION = 'DEVICE_START_CRD_SESSION'
    CAPTURE_LOGS = 'CAPTURE_LOGS'


class DirectoryChromeosdevicesIssueCommandRequest(BaseModel):
    commandType: Optional[CommandType] = Field(None, description='The type of command.')
    payload: Optional[str] = Field(
        None,
        description='The payload for the command, provide it only if command supports it. The following commands support adding payload: * `SET_VOLUME`: Payload is a stringified JSON object in the form: { "volume": 50 }. The volume has to be an integer in the range [0,100]. * `DEVICE_START_CRD_SESSION`: Payload is optionally a stringified JSON object in the form: { "ackedUserPresence": true }. `ackedUserPresence` is a boolean. By default, `ackedUserPresence` is set to `false`. To start a Chrome Remote Desktop session for an active device, set `ackedUserPresence` to `true`.',
    )


class DirectoryChromeosdevicesIssueCommandResponse(BaseModel):
    commandId: Optional[str] = Field(
        None,
        description='The unique ID of the issued command, used to retrieve the command status.',
    )


class DomainAlias(BaseModel):
    creationTime: Optional[str] = Field(
        None, description='The creation time of the domain alias. (Read-only).'
    )
    domainAliasName: Optional[str] = Field(None, description='The domain alias name.')
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#domainAlias', description='Kind of resource this is.'
    )
    parentDomainName: Optional[str] = Field(
        None,
        description='The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.',
    )
    verified: Optional[bool] = Field(
        None,
        description='Indicates the verification state of a domain alias. (Read-only)',
    )


class DomainAliases(BaseModel):
    domainAliases: Optional[List[DomainAlias]] = Field(
        None, description='A list of domain alias objects.'
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#domainAliases', description='Kind of resource this is.'
    )


class Domains(BaseModel):
    creationTime: Optional[str] = Field(
        None,
        description='Creation time of the domain. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only).',
    )
    domainAliases: Optional[List[DomainAlias]] = Field(
        None, description='A list of domain alias objects. (Read-only)'
    )
    domainName: Optional[str] = Field(
        None, description='The domain name of the customer.'
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    isPrimary: Optional[bool] = Field(
        None, description='Indicates if the domain is a primary domain (Read-only).'
    )
    kind: Optional[str] = Field(
        'admin#directory#domain', description='Kind of resource this is.'
    )
    verified: Optional[bool] = Field(
        None, description='Indicates the verification state of a domain. (Read-only).'
    )


class Domains2(BaseModel):
    domains: Optional[List[Domains]] = Field(
        None, description='A list of domain objects.'
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#domains', description='Kind of resource this is.'
    )


class Empty(BaseModel):
    pass


class ErrorCode(Enum):
    OK = 'OK'
    CANCELLED = 'CANCELLED'
    UNKNOWN = 'UNKNOWN'
    INVALID_ARGUMENT = 'INVALID_ARGUMENT'
    DEADLINE_EXCEEDED = 'DEADLINE_EXCEEDED'
    NOT_FOUND = 'NOT_FOUND'
    ALREADY_EXISTS = 'ALREADY_EXISTS'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    UNAUTHENTICATED = 'UNAUTHENTICATED'
    RESOURCE_EXHAUSTED = 'RESOURCE_EXHAUSTED'
    FAILED_PRECONDITION = 'FAILED_PRECONDITION'
    ABORTED = 'ABORTED'
    OUT_OF_RANGE = 'OUT_OF_RANGE'
    UNIMPLEMENTED = 'UNIMPLEMENTED'
    INTERNAL = 'INTERNAL'
    UNAVAILABLE = 'UNAVAILABLE'
    DATA_LOSS = 'DATA_LOSS'


class Feature(BaseModel):
    etags: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#resources#features#Feature',
        description='Kind of resource this is.',
    )
    name: Optional[str] = Field(None, description='The name of the feature.')


class FeatureInstance(BaseModel):
    feature: Optional[Feature] = Field(
        None,
        description='The feature that this is an instance of. A calendar resource may have multiple instances of a feature.',
    )


class FeatureRename(BaseModel):
    newName: Optional[str] = Field(None, description='New name of the feature.')


class Features(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    features: Optional[List[Feature]] = Field(
        None, description='The Features in this page of results.'
    )
    kind: Optional[str] = Field(
        'admin#directory#resources#features#featuresList',
        description='Kind of resource this is.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.',
    )


class Group(BaseModel):
    adminCreated: Optional[bool] = Field(
        None,
        description='Read-only. Value is `true` if this group was created by an administrator rather than a user.',
    )
    aliases: Optional[List[str]] = Field(
        None,
        description="Read-only. The list of a group's alias email addresses. To add, update, or remove a group's aliases, use the `groups.aliases` methods. If edited in a group's POST or PUT request, the edit is ignored.",
    )
    description: Optional[str] = Field(
        None,
        description='An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters.',
    )
    directMembersCount: Optional[str] = Field(
        None,
        description='The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group.',
    )
    email: Optional[str] = Field(
        None,
        description="The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details.",
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    id: Optional[str] = Field(
        None,
        description="Read-only. The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`.",
    )
    kind: Optional[str] = Field(
        'admin#directory#group',
        description='The type of the API resource. For Groups resources, the value is `admin#directory#group`.',
    )
    name: Optional[str] = Field(None, description="The group's display name.")
    nonEditableAliases: Optional[List[str]] = Field(
        None,
        description="Read-only. The list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored.",
    )


class GroupAlias(BaseModel):
    alias: Optional[str] = Field(None, description='The alias email address.')
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    id: Optional[str] = Field(None, description='The unique ID of the group.')
    kind: Optional[str] = Field(
        None,
        description='The type of the API resource. For Alias resources, the value is `admin#directory#alias`.',
    )
    primaryEmail: Optional[str] = Field(
        None, description='The primary email address of the group.'
    )


class Groups(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    groups: Optional[List[Group]] = Field(None, description='A list of group objects.')
    kind: Optional[str] = Field(
        'admin#directory#groups', description='Kind of resource this is.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token used to access next page of this result.'
    )


class Member(BaseModel):
    delivery_settings: Optional[str] = Field(
        None,
        description='Defines mail delivery preferences of member. This is only supported by create/update/get.',
    )
    email: Optional[str] = Field(
        None,
        description="The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.",
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    id: Optional[str] = Field(
        None,
        description="The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`.",
    )
    kind: Optional[str] = Field(
        'admin#directory#member',
        description='The type of the API resource. For Members resources, the value is `admin#directory#member`.',
    )
    role: Optional[str] = Field(
        None,
        description="The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`. For more information about a member's role, see the [administration help center](https://support.google.com/a/answer/167094).",
    )
    status: Optional[str] = Field(None, description='Status of member (Immutable)')
    type: Optional[str] = Field(None, description='The type of group member.')


class Members(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#members', description='Kind of resource this is.'
    )
    members: Optional[List[Member]] = Field(
        None, description='A list of member objects.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token used to access next page of this result.'
    )


class MembersHasMember(BaseModel):
    isMember: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.',
    )


class Application(BaseModel):
    displayName: Optional[str] = Field(
        None, description="The application's display name. An example is `Browser`."
    )
    packageName: Optional[str] = Field(
        None,
        description="The application's package name. An example is `com.android.browser`.",
    )
    permission: Optional[List[str]] = Field(
        None,
        description="The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or `MANAGE_ACCOUNTS`.",
    )
    versionCode: Optional[int] = Field(
        None, description="The application's version code. An example is `13`."
    )
    versionName: Optional[str] = Field(
        None, description="The application's version name. An example is `3.2-140714`."
    )


class MobileDevice(BaseModel):
    adbStatus: Optional[bool] = Field(
        None,
        description='Adb (USB debugging) enabled or disabled on device (Read-only)',
    )
    applications: Optional[List[Application]] = Field(
        None,
        description='The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access Google Workspace data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API updates the list with five applications, the is now the updated list of five applications.',
    )
    basebandVersion: Optional[str] = Field(
        None, description="The device's baseband version."
    )
    bootloaderVersion: Optional[str] = Field(
        None, description='Mobile Device Bootloader version (Read-only)'
    )
    brand: Optional[str] = Field(None, description='Mobile Device Brand (Read-only)')
    buildNumber: Optional[str] = Field(
        None, description="The device's operating system build number."
    )
    defaultLanguage: Optional[str] = Field(
        None, description='The default locale used on the device.'
    )
    developerOptionsStatus: Optional[bool] = Field(
        None, description='Developer options enabled or disabled on device (Read-only)'
    )
    deviceCompromisedStatus: Optional[str] = Field(
        None, description='The compromised device status.'
    )
    deviceId: Optional[str] = Field(
        None,
        description='The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier.',
    )
    devicePasswordStatus: Optional[str] = Field(
        None, description='DevicePasswordStatus (Read-only)'
    )
    email: Optional[List[str]] = Field(
        None,
        description="The list of the owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.",
    )
    encryptionStatus: Optional[str] = Field(
        None, description='Mobile Device Encryption Status (Read-only)'
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    firstSync: Optional[datetime] = Field(
        None,
        description='Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)',
    )
    hardware: Optional[str] = Field(
        None, description='Mobile Device Hardware (Read-only)'
    )
    hardwareId: Optional[str] = Field(
        None,
        description='The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating one of these devices, this is a read-only property.',
    )
    imei: Optional[str] = Field(None, description="The device's IMEI number.")
    kernelVersion: Optional[str] = Field(
        None, description="The device's kernel version."
    )
    kind: Optional[str] = Field(
        'admin#directory#mobiledevice',
        description='The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`.',
    )
    lastSync: Optional[datetime] = Field(
        None,
        description='Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)',
    )
    managedAccountIsOnOwnerProfile: Optional[bool] = Field(
        None,
        description='Boolean indicating if this account is on owner/primary profile or not.',
    )
    manufacturer: Optional[str] = Field(
        None, description='Mobile Device manufacturer (Read-only)'
    )
    meid: Optional[str] = Field(None, description="The device's MEID number.")
    model: Optional[str] = Field(
        None,
        description="The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).",
    )
    name: Optional[List[str]] = Field(
        None,
        description="The list of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).",
    )
    networkOperator: Optional[str] = Field(
        None,
        description='Mobile Device mobile or network operator (if available) (Read-only)',
    )
    os: Optional[str] = Field(
        None,
        description="The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).",
    )
    otherAccountsInfo: Optional[List[str]] = Field(
        None, description='The list of accounts added on device (Read-only)'
    )
    privilege: Optional[str] = Field(None, description='DMAgentPermission (Read-only)')
    releaseVersion: Optional[str] = Field(
        None, description='Mobile Device release version version (Read-only)'
    )
    resourceId: Optional[str] = Field(
        None,
        description='The unique ID the API service uses to identify the mobile device.',
    )
    securityPatchLevel: Optional[str] = Field(
        None, description='Mobile Device Security patch level (Read-only)'
    )
    serialNumber: Optional[str] = Field(None, description="The device's serial number.")
    status: Optional[str] = Field(None, description="The device's status.")
    supportsWorkProfile: Optional[bool] = Field(
        None, description='Work profile supported on device (Read-only)'
    )
    type: Optional[str] = Field(None, description='The type of mobile device.')
    unknownSourcesStatus: Optional[bool] = Field(
        None, description='Unknown sources enabled or disabled on device (Read-only)'
    )
    userAgent: Optional[str] = Field(
        None,
        description="Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).",
    )
    wifiMacAddress: Optional[str] = Field(
        None, description="The device's MAC address on Wi-Fi networks."
    )


class MobileDeviceAction(BaseModel):
    action: Optional[str] = Field(
        None, description='The action to be performed on the device.'
    )


class MobileDevices(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#mobiledevices', description='Kind of resource this is.'
    )
    mobiledevices: Optional[List[MobileDevice]] = Field(
        None, description='A list of Mobile Device objects.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token used to access next page of this result.'
    )


class OrgUnit(BaseModel):
    blockInheritance: Optional[bool] = Field(
        None,
        description='Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075).',
    )
    description: Optional[str] = Field(
        None, description='Description of the organizational unit.'
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#orgUnit',
        description='The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`.',
    )
    name: Optional[str] = Field(
        None,
        description="The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required.",
    )
    orgUnitId: Optional[str] = Field(
        None, description='The unique ID of the organizational unit.'
    )
    orgUnitPath: Optional[str] = Field(
        None,
        description="The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).",
    )
    parentOrgUnitId: Optional[str] = Field(
        None,
        description='The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set.',
    )
    parentOrgUnitPath: Optional[str] = Field(
        None,
        description="The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set.",
    )


class OrgUnits(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#orgUnits',
        description='The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`.',
    )
    organizationUnits: Optional[List[OrgUnit]] = Field(
        None, description='A list of organizational unit objects.'
    )


class State1(Enum):
    updateStateUnspecified = 'updateStateUnspecified'
    updateStateNotStarted = 'updateStateNotStarted'
    updateStateDownloadInProgress = 'updateStateDownloadInProgress'
    updateStateNeedReboot = 'updateStateNeedReboot'


class OsUpdateStatus(BaseModel):
    rebootTime: Optional[str] = Field(
        None, description='Date and time of the last reboot.'
    )
    state: Optional[State1] = Field(
        None, description='The update state of an OS update.'
    )
    targetKioskAppVersion: Optional[str] = Field(
        None,
        description='New required platform version from the pending updated kiosk app.',
    )
    targetOsVersion: Optional[str] = Field(
        None,
        description='New platform version of the OS image being downloaded and applied. It is only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy "0.0.0.0" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is restarted without a reboot.',
    )
    updateCheckTime: Optional[str] = Field(
        None, description='Date and time of the last update check.'
    )
    updateTime: Optional[str] = Field(
        None, description='Date and time of the last successful OS update.'
    )


class PrintServer(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Time when the print server was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Editable. Description of the print server (as shown in the Admin console).',
    )
    displayName: Optional[str] = Field(
        None,
        description='Editable. Display name of the print server (as shown in the Admin console).',
    )
    id: Optional[str] = Field(
        None,
        description='Immutable. ID of the print server. Leave empty when creating.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. Resource name of the print server. Leave empty when creating. Format: `customers/{customer.id}/printServers/{print_server.id}`',
    )
    orgUnitId: Optional[str] = Field(
        None,
        description="ID of the organization unit (OU) that owns this print server. This value can only be set when the print server is initially created. If it's not populated, the print server is placed under the root OU. The `org_unit_id` can be retrieved using the [Directory API](/admin-sdk/directory/reference/rest/v1/orgunits).",
    )
    uri: Optional[str] = Field(None, description='Editable. Print server URI.')


class PrintServerFailureInfo(BaseModel):
    errorCode: Optional[ErrorCode] = Field(
        None, description='Canonical code for why the update failed to apply.'
    )
    errorMessage: Optional[str] = Field(None, description='Failure reason message.')
    printServer: Optional[PrintServer] = Field(None, description='Failed print server.')
    printServerId: Optional[str] = Field(
        None, description='ID of a failed print server.'
    )


class Printer(BaseModel):
    auxiliaryMessages: Optional[List[AuxiliaryMessage]] = Field(
        None,
        description='Output only. Auxiliary messages about issues with the printer configuration if any.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time when printer was created.'
    )
    description: Optional[str] = Field(
        None, description='Editable. Description of printer.'
    )
    displayName: Optional[str] = Field(None, description='Editable. Name of printer.')
    id: Optional[str] = Field(
        None, description='Id of the printer. (During printer creation leave empty)'
    )
    makeAndModel: Optional[str] = Field(
        None,
        description='Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)',
    )
    orgUnitId: Optional[str] = Field(
        None,
        description='Organization Unit that owns this printer (Only can be set during Printer creation)',
    )
    uri: Optional[str] = Field(None, description='Editable. Printer URI.')
    useDriverlessConfig: Optional[bool] = Field(
        None,
        description="Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model can be ignored",
    )


class PrinterModel(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Display name. eq. "Brother MFC-8840D"'
    )
    makeAndModel: Optional[str] = Field(
        None,
        description='Make and model as represented in "make_and_model" field in Printer object. eq. "brother mfc-8840d"',
    )
    manufacturer: Optional[str] = Field(None, description='Manufacturer. eq. "Brother"')


class Privilege(BaseModel):
    childPrivileges: Optional[List[Privilege]] = Field(
        None,
        description='A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.',
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    isOuScopable: Optional[bool] = Field(
        None, description='If the privilege can be restricted to an organization unit.'
    )
    kind: Optional[str] = Field(
        'admin#directory#privilege',
        description='The type of the API resource. This is always `admin#directory#privilege`.',
    )
    privilegeName: Optional[str] = Field(None, description='The name of the privilege.')
    serviceId: Optional[str] = Field(
        None,
        description='The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).',
    )
    serviceName: Optional[str] = Field(
        None, description='The name of the service this privilege is for.'
    )


class Privileges(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    items: Optional[List[Privilege]] = Field(
        None, description='A list of Privilege resources.'
    )
    kind: Optional[str] = Field(
        'admin#directory#privileges',
        description='The type of the API resource. This is always `admin#directory#privileges`.',
    )


class RolePrivilege(BaseModel):
    privilegeName: Optional[str] = Field(None, description='The name of the privilege.')
    serviceId: Optional[str] = Field(
        None,
        description='The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).',
    )


class Role(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    isSuperAdminRole: Optional[bool] = Field(
        None, description='Returns `true` if the role is a super admin role.'
    )
    isSystemRole: Optional[bool] = Field(
        None, description='Returns `true` if this is a pre-defined system role.'
    )
    kind: Optional[str] = Field(
        'admin#directory#role',
        description='The type of the API resource. This is always `admin#directory#role`.',
    )
    roleDescription: Optional[str] = Field(
        None, description='A short description of the role.'
    )
    roleId: Optional[str] = Field(None, description='ID of the role.')
    roleName: Optional[str] = Field(None, description='Name of the role.')
    rolePrivileges: Optional[List[RolePrivilege]] = Field(
        None, description='The set of privileges that are granted to this role.'
    )


class AssigneeType(Enum):
    user = 'user'
    group = 'group'


class RoleAssignment(BaseModel):
    assignedTo: Optional[str] = Field(
        None,
        description='The unique ID of the entity this role is assigned to—either the `user_id` of a user, the `group_id` of a group, or the `uniqueId` of a service account as defined in [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).',
    )
    assigneeType: Optional[AssigneeType] = Field(
        None, description='Output only. The type of the assignee (`USER` or `GROUP`).'
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#roleAssignment',
        description='The type of the API resource. This is always `admin#directory#roleAssignment`.',
    )
    orgUnitId: Optional[str] = Field(
        None,
        description='If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.',
    )
    roleAssignmentId: Optional[str] = Field(
        None, description='ID of this roleAssignment.'
    )
    roleId: Optional[str] = Field(
        None, description='The ID of the role that is assigned.'
    )
    scopeType: Optional[str] = Field(
        None, description='The scope in which this role is assigned.'
    )


class RoleAssignments(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    items: Optional[List[RoleAssignment]] = Field(
        None, description='A list of RoleAssignment resources.'
    )
    kind: Optional[str] = Field(
        'admin#directory#roleAssignments',
        description='The type of the API resource. This is always `admin#directory#roleAssignments`.',
    )
    nextPageToken: Optional[str] = None


class Roles(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    items: Optional[List[Role]] = Field(None, description='A list of Role resources.')
    kind: Optional[str] = Field(
        'admin#directory#roles',
        description='The type of the API resource. This is always `admin#directory#roles`.',
    )
    nextPageToken: Optional[str] = None


class NumericIndexingSpec(BaseModel):
    maxValue: Optional[float] = Field(
        None,
        description='Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.',
    )
    minValue: Optional[float] = Field(
        None,
        description='Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.',
    )


class SchemaFieldSpec(BaseModel):
    displayName: Optional[str] = Field(None, description='Display Name of the field.')
    etag: Optional[str] = Field(None, description='The ETag of the field.')
    fieldId: Optional[str] = Field(
        None, description='The unique identifier of the field (Read-only)'
    )
    fieldName: Optional[str] = Field(None, description='The name of the field.')
    fieldType: Optional[str] = Field(None, description='The type of the field.')
    indexed: Optional[bool] = Field(
        True,
        description='Boolean specifying whether the field is indexed or not. Default: `true`.',
    )
    kind: Optional[str] = Field(
        'admin#directory#schema#fieldspec',
        description='The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.',
    )
    multiValued: Optional[bool] = Field(
        None,
        description='A boolean specifying whether this is a multi-valued field or not. Default: `false`.',
    )
    numericIndexingSpec: Optional[NumericIndexingSpec] = Field(
        None,
        description='Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported.',
    )
    readAccessType: Optional[str] = Field(
        'ALL_DOMAIN_USERS',
        description='Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.',
    )


class Token(BaseModel):
    anonymous: Optional[bool] = Field(
        None,
        description='Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID.',
    )
    clientId: Optional[str] = Field(
        None, description='The Client ID of the application the token is issued to.'
    )
    displayText: Optional[str] = Field(
        None,
        description='The displayable name of the application the token is issued to.',
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#token',
        description='The type of the API resource. This is always `admin#directory#token`.',
    )
    nativeApp: Optional[bool] = Field(
        None,
        description='Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device.',
    )
    scopes: Optional[List[str]] = Field(
        None, description='A list of authorization scopes the application is granted.'
    )
    userKey: Optional[str] = Field(
        None, description='The unique ID of the user that issued the token.'
    )


class Tokens(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    items: Optional[List[Token]] = Field(None, description='A list of Token resources.')
    kind: Optional[str] = Field(
        'admin#directory#tokenList',
        description='The type of the API resource. This is always `admin#directory#tokenList`.',
    )


class UserAbout(BaseModel):
    contentType: Optional[str] = Field(
        None,
        description='About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.',
    )
    value: Optional[str] = Field(None, description='Actual value of notes.')


class UserAddress(BaseModel):
    country: Optional[str] = Field(None, description='Country.')
    countryCode: Optional[str] = Field(None, description='Country code.')
    customType: Optional[str] = Field(None, description='Custom type.')
    extendedAddress: Optional[str] = Field(None, description='Extended Address.')
    formatted: Optional[str] = Field(None, description='Formatted address.')
    locality: Optional[str] = Field(None, description='Locality.')
    poBox: Optional[str] = Field(None, description='Other parts of address.')
    postalCode: Optional[str] = Field(None, description='Postal code.')
    primary: Optional[bool] = Field(
        None,
        description="If this is user's primary address. Only one entry could be marked as primary.",
    )
    region: Optional[str] = Field(None, description='Region.')
    sourceIsStructured: Optional[bool] = Field(
        None,
        description='User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.',
    )
    streetAddress: Optional[str] = Field(None, description='Street.')
    type: Optional[str] = Field(
        None,
        description='Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.',
    )


class UserAlias(BaseModel):
    alias: Optional[str] = Field(None, description='The alias email address.')
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    id: Optional[str] = Field(None, description='The unique ID for the user.')
    kind: Optional[str] = Field(
        None,
        description='The type of the API resource. For Alias resources, the value is `admin#directory#alias`.',
    )
    primaryEmail: Optional[str] = Field(
        None, description="The user's primary email address."
    )


class UserCustomProperties(RootModel[Optional[Dict[str, Any]]]):
    root: Optional[Dict[str, Any]] = None


class UserEmail(BaseModel):
    address: Optional[str] = Field(None, description='Email id of the user.')
    customType: Optional[str] = Field(None, description='Custom Type.')
    primary: Optional[bool] = Field(
        None,
        description="If this is user's primary email. Only one entry could be marked as primary.",
    )
    type: Optional[str] = Field(
        None,
        description='Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.',
    )


class UserExternalId(BaseModel):
    customType: Optional[str] = Field(None, description='Custom type.')
    type: Optional[str] = Field(None, description='The type of the Id.')
    value: Optional[str] = Field(None, description='The value of the id.')


class UserGender(BaseModel):
    addressMeAs: Optional[str] = Field(
        None,
        description='AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.',
    )
    customGender: Optional[str] = Field(None, description='Custom gender.')
    type: Optional[str] = Field(None, description='Gender.')


class UserIm(BaseModel):
    customProtocol: Optional[str] = Field(None, description='Custom protocol.')
    customType: Optional[str] = Field(None, description='Custom type.')
    im: Optional[str] = Field(None, description='Instant messenger id.')
    primary: Optional[bool] = Field(
        None,
        description="If this is user's primary im. Only one entry could be marked as primary.",
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.',
    )
    type: Optional[str] = Field(
        None,
        description='Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.',
    )


class UserKeyword(BaseModel):
    customType: Optional[str] = Field(None, description='Custom Type.')
    type: Optional[str] = Field(
        None,
        description='Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.',
    )
    value: Optional[str] = Field(None, description='Keyword.')


class UserLanguage(BaseModel):
    customLanguage: Optional[str] = Field(
        None,
        description="Other language. User can provide their own language name if there is no corresponding ISO 639 language code. If this is set, `languageCode` can't be set.",
    )
    languageCode: Optional[str] = Field(
        None,
        description="ISO 639 string representation of a language. See [Language Codes](/admin-sdk/directory/v1/languages) for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. Illegal values cause `SchemaException`. If this is set, `customLanguage` can't be set.",
    )
    preference: Optional[str] = Field(
        None,
        description="Optional. If present, controls whether the specified `languageCode` is the user's preferred language. If `customLanguage` is set, this can't be set. Allowed values are `preferred` and `not_preferred`.",
    )


class UserLocation(BaseModel):
    area: Optional[str] = Field(
        None,
        description="Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
    )
    buildingId: Optional[str] = Field(None, description='Building Identifier.')
    customType: Optional[str] = Field(None, description='Custom Type.')
    deskCode: Optional[str] = Field(
        None, description='Most specific textual code of individual desk location.'
    )
    floorName: Optional[str] = Field(None, description='Floor name/number.')
    floorSection: Optional[str] = Field(
        None,
        description="Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
    )
    type: Optional[str] = Field(
        None,
        description="Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
    )


class UserMakeAdmin(BaseModel):
    status: Optional[bool] = Field(
        None, description='Indicates the administrator status of the user.'
    )


class UserName(BaseModel):
    displayName: Optional[str] = Field(
        None, description="The user's display name. Limit: 256 characters."
    )
    familyName: Optional[str] = Field(
        None, description="The user's last name. Required when creating a user account."
    )
    fullName: Optional[str] = Field(
        None,
        description="The user's full name formed by concatenating the first and last name values.",
    )
    givenName: Optional[str] = Field(
        None,
        description="The user's first name. Required when creating a user account.",
    )


class UserOrganization(BaseModel):
    costCenter: Optional[str] = Field(
        None, description='The cost center of the users department.'
    )
    customType: Optional[str] = Field(None, description='Custom type.')
    department: Optional[str] = Field(
        None, description='Department within the organization.'
    )
    description: Optional[str] = Field(
        None, description='Description of the organization.'
    )
    domain: Optional[str] = Field(
        None, description='The domain to which the organization belongs to.'
    )
    fullTimeEquivalent: Optional[int] = Field(
        None,
        description='The full-time equivalent millipercent within the organization (100000 = 100%).',
    )
    location: Optional[str] = Field(
        None,
        description='Location of the organization. This need not be fully qualified address.',
    )
    name: Optional[str] = Field(None, description='Name of the organization')
    primary: Optional[bool] = Field(
        None, description="If it user's primary organization."
    )
    symbol: Optional[str] = Field(None, description='Symbol of the organization.')
    title: Optional[str] = Field(
        None, description='Title (designation) of the user in the organization.'
    )
    type: Optional[str] = Field(
        None,
        description='Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.',
    )


class UserPhone(BaseModel):
    customType: Optional[str] = Field(None, description='Custom Type.')
    primary: Optional[bool] = Field(
        None, description="If this is user's primary phone or not."
    )
    type: Optional[str] = Field(
        None,
        description='Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.',
    )
    value: Optional[str] = Field(None, description='Phone number.')


class UserPhoto(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    height: Optional[int] = Field(None, description='Height of the photo in pixels.')
    id: Optional[str] = Field(
        None, description='The ID the API uses to uniquely identify the user.'
    )
    kind: Optional[str] = Field(
        'admin#directory#user#photo',
        description='The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.',
    )
    mimeType: Optional[str] = Field(
        None,
        description='The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding.',
    )
    photoData: Optional[str] = Field(
        None,
        description="The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.",
    )
    primaryEmail: Optional[str] = Field(
        None, description="The user's primary email address."
    )
    width: Optional[int] = Field(None, description='Width of the photo in pixels.')


class UserPosixAccount(BaseModel):
    accountId: Optional[str] = Field(
        None, description='A POSIX account field identifier.'
    )
    gecos: Optional[str] = Field(
        None, description='The GECOS (user information) for this account.'
    )
    gid: Optional[str] = Field(None, description='The default group ID.')
    homeDirectory: Optional[str] = Field(
        None, description='The path to the home directory for this account.'
    )
    operatingSystemType: Optional[str] = Field(
        None, description='The operating system type for this account.'
    )
    primary: Optional[bool] = Field(
        None, description="If this is user's primary account within the SystemId."
    )
    shell: Optional[str] = Field(
        None, description='The path to the login shell for this account.'
    )
    systemId: Optional[str] = Field(
        None,
        description='System identifier for which account Username or Uid apply to.',
    )
    uid: Optional[str] = Field(None, description='The POSIX compliant user ID.')
    username: Optional[str] = Field(None, description='The username of the account.')


class UserRelation(BaseModel):
    customType: Optional[str] = Field(None, description='Custom Type.')
    type: Optional[str] = Field(
        None,
        description='The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.',
    )
    value: Optional[str] = Field(None, description='The name of the relation.')


class UserSshPublicKey(BaseModel):
    expirationTimeUsec: Optional[str] = Field(
        None, description='An expiration time in microseconds since epoch.'
    )
    fingerprint: Optional[str] = Field(
        None, description='A SHA-256 fingerprint of the SSH public key. (Read-only)'
    )
    key: Optional[str] = Field(None, description='An SSH public key.')


class UserUndelete(BaseModel):
    orgUnitPath: Optional[str] = Field(None, description='OrgUnit of User')


class UserWebsite(BaseModel):
    customType: Optional[str] = Field(None, description='Custom Type.')
    primary: Optional[bool] = Field(
        None, description="If this is user's primary website or not."
    )
    type: Optional[str] = Field(
        None,
        description='Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.',
    )
    value: Optional[str] = Field(None, description='Website.')


class VerificationCode(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#verificationCode',
        description='The type of the resource. This is always `admin#directory#verificationCode`.',
    )
    userId: Optional[str] = Field(
        None, description='The obfuscated unique ID of the user.'
    )
    verificationCode: Optional[str] = Field(
        None,
        description='A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.',
    )


class VerificationCodes(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    items: Optional[List[VerificationCode]] = Field(
        None, description='A list of verification code resources.'
    )
    kind: Optional[str] = Field(
        'admin#directory#verificationCodesList',
        description='The type of the resource. This is always `admin#directory#verificationCodesList`.',
    )


class OrderBy(Enum):
    annotatedLocation = 'annotatedLocation'
    annotatedUser = 'annotatedUser'
    lastSync = 'lastSync'
    notes = 'notes'
    serialNumber = 'serialNumber'
    status = 'status'


class Projection(Enum):
    BASIC = 'BASIC'
    FULL = 'FULL'


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class OrderBy2(Enum):
    deviceId = 'deviceId'
    email = 'email'
    lastSync = 'lastSync'
    model = 'model'
    name = 'name'
    os = 'os'
    status = 'status'
    type = 'type'


class Type1(Enum):
    all = 'all'
    children = 'children'


class CoordinatesSource(Enum):
    CLIENT_SPECIFIED = 'CLIENT_SPECIFIED'
    RESOLVED_FROM_ADDRESS = 'RESOLVED_FROM_ADDRESS'
    SOURCE_UNSPECIFIED = 'SOURCE_UNSPECIFIED'


class OrderBy4(Enum):
    email = 'email'


class Event(Enum):
    add = 'add'
    delete = 'delete'
    makeAdmin = 'makeAdmin'
    undelete = 'undelete'
    update = 'update'


class OrderBy6(Enum):
    email = 'email'
    familyName = 'familyName'
    givenName = 'givenName'


class Projection12(Enum):
    basic = 'basic'
    custom = 'custom'
    full = 'full'


class ViewType(Enum):
    admin_view = 'admin_view'
    domain_public = 'domain_public'


class Event4(Enum):
    add = 'add'
    delete = 'delete'


class BatchCreatePrintServersResponse(BaseModel):
    failures: Optional[List[PrintServerFailureInfo]] = Field(
        None,
        description='A list of create failures. `PrintServer` IDs are not populated, as print servers were not created.',
    )
    printServers: Optional[List[PrintServer]] = Field(
        None,
        description='A list of successfully created print servers with their IDs populated.',
    )


class BatchDeletePrintServersResponse(BaseModel):
    failedPrintServers: Optional[List[PrintServerFailureInfo]] = Field(
        None, description='A list of update failures.'
    )
    printServerIds: Optional[List[str]] = Field(
        None, description='A list of print server IDs that were successfully deleted.'
    )


class Building(BaseModel):
    address: Optional[BuildingAddress] = Field(
        None,
        description='The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are required.',
    )
    buildingId: Optional[str] = Field(
        None,
        description='Unique identifier for the building. The maximum length is 100 characters.',
    )
    buildingName: Optional[str] = Field(
        None,
        description='The building name as seen by users in Calendar. Must be unique for the customer. For example, "NYC-CHEL". The maximum length is 100 characters.',
    )
    coordinates: Optional[BuildingCoordinates] = Field(
        None,
        description='The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.',
    )
    description: Optional[str] = Field(
        None,
        description='A brief description of the building. For example, "Chelsea Market".',
    )
    etags: Optional[str] = Field(None, description='ETag of the resource.')
    floorNames: Optional[List[str]] = Field(
        None,
        description='The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, ["B2", "B1", "L", "1", "2", "2M", "3", "PH"] Must contain at least one entry.',
    )
    kind: Optional[str] = Field(
        'admin#directory#resources#buildings#Building',
        description='Kind of resource this is.',
    )


class Buildings(BaseModel):
    buildings: Optional[List[Building]] = Field(
        None, description='The Buildings in this page of results.'
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#resources#buildings#buildingsList',
        description='Kind of resource this is.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.',
    )


class ChromeOsDevice(BaseModel):
    activeTimeRanges: Optional[List[ActiveTimeRange]] = Field(
        None, description='A list of active time ranges (Read-only).'
    )
    annotatedAssetId: Optional[str] = Field(
        None,
        description='The asset identifier as noted by an administrator or specified during enrollment.',
    )
    annotatedLocation: Optional[str] = Field(
        None,
        description='The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed.',
    )
    annotatedUser: Optional[str] = Field(
        None,
        description='The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed.',
    )
    autoUpdateExpiration: Optional[str] = Field(
        None,
        description='(Read-only) The timestamp after which the device will stop receiving Chrome updates or support',
    )
    bootMode: Optional[str] = Field(
        None,
        description="The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).",
    )
    cpuInfo: Optional[List[CpuInfoItem]] = Field(
        None, description='Information regarding CPU specs in the device.'
    )
    cpuStatusReports: Optional[List[CpuStatusReport]] = Field(
        None, description='Reports of CPU utilization and temperature (Read-only)'
    )
    deprovisionReason: Optional[DeprovisionReason] = Field(
        None, description='(Read-only) Deprovision reason.'
    )
    deviceFiles: Optional[List[DeviceFile]] = Field(
        None, description='A list of device files to download (Read-only)'
    )
    deviceId: Optional[str] = Field(
        None, description='The unique ID of the Chrome device.'
    )
    diskVolumeReports: Optional[List[DiskVolumeReport]] = Field(
        None,
        description='Reports of disk space and other info about mounted/connected volumes.',
    )
    dockMacAddress: Optional[str] = Field(
        None,
        description='(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.',
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    ethernetMacAddress: Optional[str] = Field(
        None, description="The device's MAC address on the ethernet network interface."
    )
    ethernetMacAddress0: Optional[str] = Field(
        None,
        description='(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.',
    )
    firmwareVersion: Optional[str] = Field(
        None, description="The Chrome device's firmware version."
    )
    firstEnrollmentTime: Optional[str] = Field(
        None, description='Date and time for the first time the device was enrolled.'
    )
    kind: Optional[str] = Field(
        'admin#directory#chromeosdevice',
        description='The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.',
    )
    lastDeprovisionTimestamp: Optional[str] = Field(
        None,
        description='(Read-only) Date and time for the last deprovision of the device.',
    )
    lastEnrollmentTime: Optional[datetime] = Field(
        None, description='Date and time the device was last enrolled (Read-only)'
    )
    lastKnownNetwork: Optional[List[LastKnownNetworkItem]] = Field(
        None, description='Contains last known network (Read-only)'
    )
    lastSync: Optional[datetime] = Field(
        None,
        description='Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)',
    )
    macAddress: Optional[str] = Field(
        None,
        description="The device's wireless MAC address. If the device does not have this information, it is not included in the response.",
    )
    manufactureDate: Optional[str] = Field(
        None,
        description='(Read-only) The date the device was manufactured in yyyy-mm-dd format.',
    )
    meid: Optional[str] = Field(
        None,
        description="The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).",
    )
    model: Optional[str] = Field(
        None,
        description="The device's model information. If the device does not have this information, this property is not included in the response.",
    )
    notes: Optional[str] = Field(
        None,
        description="Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed.",
    )
    orderNumber: Optional[str] = Field(
        None,
        description="The device's order number. Only devices directly purchased from Google have an order number.",
    )
    orgUnitId: Optional[str] = Field(
        None,
        description='The unique ID of the organizational unit. orgUnitPath is the human readable version of orgUnitId. While orgUnitPath may change by renaming an organizational unit within the path, orgUnitId is unchangeable for one organizational unit. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).',
    )
    orgUnitPath: Optional[str] = Field(
        None,
        description="The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).",
    )
    osUpdateStatus: Optional[OsUpdateStatus] = Field(
        None, description='The status of the OS updates for the device.'
    )
    osVersion: Optional[str] = Field(
        None, description="The Chrome device's operating system version."
    )
    platformVersion: Optional[str] = Field(
        None, description="The Chrome device's platform version."
    )
    recentUsers: Optional[List[RecentUser]] = Field(
        None,
        description='A list of recent device users, in descending order, by last login time.',
    )
    screenshotFiles: Optional[List[ScreenshotFile]] = Field(
        None,
        description='A list of screenshot files to download. Type is always "SCREENSHOT_FILE". (Read-only)',
    )
    serialNumber: Optional[str] = Field(
        None,
        description="The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab.",
    )
    status: Optional[str] = Field(None, description='The status of the device.')
    supportEndDate: Optional[datetime] = Field(
        None, description='Final date the device will be supported (Read-only)'
    )
    systemRamFreeReports: Optional[List[SystemRamFreeReport]] = Field(
        None, description='Reports of amounts of available RAM memory (Read-only)'
    )
    systemRamTotal: Optional[str] = Field(
        None, description='Total RAM on the device [in bytes] (Read-only)'
    )
    tpmVersionInfo: Optional[TpmVersionInfo] = Field(
        None, description='Trusted Platform Module (TPM) (Read-only)'
    )
    willAutoRenew: Optional[bool] = Field(
        None,
        description='Determines if the device will auto renew its support after the support end date. This is a read-only property.',
    )


class ChromeOsDevices(BaseModel):
    chromeosdevices: Optional[List[ChromeOsDevice]] = Field(
        None, description='A list of Chrome OS Device objects.'
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#chromeosdevices', description='Kind of resource this is.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description="Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request.",
    )


class CreatePrintServerRequest(BaseModel):
    parent: Optional[str] = Field(
        None,
        description="Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
    )
    printServer: Optional[PrintServer] = Field(
        None,
        description='Required. A print server to create. If you want to place the print server under a specific organizational unit (OU), then populate the `org_unit_id`. Otherwise the print server is created under the root OU. The `org_unit_id` can be retrieved using the [Directory API](https://developers.google.com/admin-sdk/directory/v1/guides/manage-org-units).',
    )


class CreatePrinterRequest(BaseModel):
    parent: Optional[str] = Field(
        None,
        description='Required. The name of the customer. Format: customers/{customer_id}',
    )
    printer: Optional[Printer] = Field(
        None,
        description='Required. A printer to create. If you want to place the printer under particular OU then populate printer.org_unit_id filed. Otherwise the printer will be placed under root OU.',
    )


class Customer(BaseModel):
    alternateEmail: Optional[str] = Field(
        None,
        description="The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`",
    )
    customerCreationTime: Optional[datetime] = Field(
        None, description="The customer's creation time (Readonly)"
    )
    customerDomain: Optional[str] = Field(
        None,
        description="The customer's primary domain name string. Do not include the `www` prefix when creating a new customer.",
    )
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    id: Optional[str] = Field(
        None,
        description="The unique ID for the customer's Google Workspace account. (Readonly)",
    )
    kind: Optional[str] = Field(
        'admin#directory#customer',
        description='Identifies the resource as a customer. Value: `admin#directory#customer`',
    )
    language: Optional[str] = Field(
        None,
        description="The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.",
    )
    phoneNumber: Optional[str] = Field(
        None,
        description="The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.",
    )
    postalAddress: Optional[CustomerPostalAddress] = Field(
        None, description="The customer's postal address information."
    )


class DirectoryChromeosdevicesCommand(BaseModel):
    commandExpireTime: Optional[str] = Field(
        None,
        description="The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
    )
    commandId: Optional[str] = Field(None, description='Unique ID of a device command.')
    commandResult: Optional[DirectoryChromeosdevicesCommandResult] = Field(
        None, description='The result of the command execution.'
    )
    issueTime: Optional[str] = Field(
        None, description='The timestamp when the command was issued by the admin.'
    )
    payload: Optional[str] = Field(
        None, description='The payload that the command specified, if any.'
    )
    state: Optional[State] = Field(None, description='Indicates the command state.')
    type: Optional[Type] = Field(None, description='The type of the command.')


class FailureInfo(BaseModel):
    errorCode: Optional[ErrorCode] = Field(
        None, description='Canonical code for why the update failed to apply.'
    )
    errorMessage: Optional[str] = Field(None, description='Failure reason message.')
    printer: Optional[Printer] = Field(None, description='Failed printer.')
    printerId: Optional[str] = Field(None, description='Id of a failed printer.')


class ListPrintServersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` in a request to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    printServers: Optional[List[PrintServer]] = Field(
        None, description='List of print servers.'
    )


class ListPrinterModelsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    printerModels: Optional[List[PrinterModel]] = Field(
        None,
        description='Printer models that are currently allowed to be configured for ChromeOs. Some printers may be added or removed over time.',
    )


class ListPrintersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    printers: Optional[List[Printer]] = Field(
        None,
        description='List of printers. If `org_unit_id` was given in the request, then only printers visible for this OU will be returned. If `org_unit_id` was not given in the request, then all printers will be returned.',
    )


class Schema(BaseModel):
    displayName: Optional[str] = Field(None, description='Display name for the schema.')
    etag: Optional[str] = Field(None, description='The ETag of the resource.')
    fields: Optional[List[SchemaFieldSpec]] = Field(
        None, description='A list of fields in the schema.'
    )
    kind: Optional[str] = Field(
        'admin#directory#schema', description='Kind of resource this is.'
    )
    schemaId: Optional[str] = Field(
        None, description='The unique identifier of the schema (Read-only)'
    )
    schemaName: Optional[str] = Field(
        None,
        description="The schema's name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error.",
    )


class Schemas(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#schemas', description='Kind of resource this is.'
    )
    schemas: Optional[List[Schema]] = Field(
        None, description='A list of UserSchema objects.'
    )


class User(BaseModel):
    addresses: Optional[Any] = Field(
        None,
        description="The list of the user's addresses. The maximum allowed data size for this field is 10KB.",
    )
    agreedToTerms: Optional[bool] = Field(
        None,
        description='Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement.',
    )
    aliases: Optional[List[str]] = Field(
        None, description="Output only. The list of the user's alias email addresses."
    )
    archived: Optional[bool] = Field(None, description='Indicates if user is archived.')
    changePasswordAtNextLogin: Optional[bool] = Field(
        None,
        description="Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224).",
    )
    creationTime: Optional[datetime] = Field(
        None, description="User's G Suite account creation time. (Read-only)"
    )
    customSchemas: Optional[Dict[str, UserCustomProperties]] = Field(
        None,
        description="Custom fields of the user. The key is a `schema_name` and its values are `'field_name': 'field_value'`.",
    )
    customerId: Optional[str] = Field(
        None,
        description="Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.",
    )
    deletionTime: Optional[datetime] = None
    emails: Optional[Any] = Field(
        None,
        description="The list of the user's email addresses. The maximum allowed data size for this field is 10KB.",
    )
    etag: Optional[str] = Field(None, description='Output only. ETag of the resource.')
    externalIds: Optional[Any] = Field(
        None,
        description='The list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2KB.',
    )
    gender: Optional[Any] = Field(
        None,
        description="The user's gender. The maximum allowed data size for this field is 1KB.",
    )
    hashFunction: Optional[str] = Field(
        None,
        description='Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer.',
    )
    id: Optional[str] = Field(
        None,
        description="The unique ID for the user. A user `id` can be used as a user request URI's `userKey`.",
    )
    ims: Optional[Any] = Field(
        None,
        description="The list of the user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2KB.",
    )
    includeInGlobalAddressList: Optional[bool] = Field(
        None,
        description="Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988).",
    )
    ipWhitelisted: Optional[bool] = Field(
        None,
        description="If `true`, the user's IP address is subject to a deprecated IP address [`allowlist`](https://support.google.com/a/answer/60752) configuration.",
    )
    isAdmin: Optional[bool] = Field(
        None,
        description='Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service.',
    )
    isDelegatedAdmin: Optional[bool] = Field(
        None,
        description='Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325).',
    )
    isEnforcedIn2Sv: Optional[bool] = Field(
        None, description='Output only. Is 2-step verification enforced (Read-only)'
    )
    isEnrolledIn2Sv: Optional[bool] = Field(
        None, description='Output only. Is enrolled in 2-step verification (Read-only)'
    )
    isMailboxSetup: Optional[bool] = Field(
        None,
        description="Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license.",
    )
    keywords: Optional[Any] = Field(
        None,
        description="The list of the user's keywords. The maximum allowed data size for this field is 1KB.",
    )
    kind: Optional[str] = Field(
        'admin#directory#user',
        description='Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`.',
    )
    languages: Optional[Any] = Field(
        None,
        description="The user's languages. The maximum allowed data size for this field is 1KB.",
    )
    lastLoginTime: Optional[datetime] = Field(
        None, description="User's last login time. (Read-only)"
    )
    locations: Optional[Any] = Field(
        None,
        description="The user's locations. The maximum allowed data size for this field is 10KB.",
    )
    name: Optional[UserName] = Field(
        None,
        description='Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information about character usage rules, see the [administration help center](https://support.google.com/a/answer/9193374). Maximum allowed data size for this field is 1KB.',
    )
    nonEditableAliases: Optional[List[str]] = Field(
        None,
        description="Output only. The list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.",
    )
    notes: Optional[Any] = Field(None, description='Notes for the user.')
    orgUnitPath: Optional[str] = Field(
        None,
        description='The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`).',
    )
    organizations: Optional[Any] = Field(
        None,
        description='The list of organizations the user belongs to. The maximum allowed data size for this field is 10KB.',
    )
    password: Optional[str] = Field(None, description="User's password")
    phones: Optional[Any] = Field(
        None,
        description="The list of the user's phone numbers. The maximum allowed data size for this field is 1KB.",
    )
    posixAccounts: Optional[Any] = Field(
        None,
        description='The list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user.',
    )
    primaryEmail: Optional[str] = Field(
        None,
        description="The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user.",
    )
    recoveryEmail: Optional[str] = Field(
        None, description='Recovery email of the user.'
    )
    recoveryPhone: Optional[str] = Field(
        None,
        description='Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.',
    )
    relations: Optional[Any] = Field(
        None,
        description="The list of the user's relationships to other users. The maximum allowed data size for this field is 2KB.",
    )
    sshPublicKeys: Optional[Any] = Field(None, description='A list of SSH public keys.')
    suspended: Optional[bool] = Field(
        None, description='Indicates if user is suspended.'
    )
    suspensionReason: Optional[str] = Field(
        None,
        description='Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`.',
    )
    thumbnailPhotoEtag: Optional[str] = Field(
        None, description="Output only. ETag of the user's photo (Read-only)"
    )
    thumbnailPhotoUrl: Optional[str] = Field(
        None,
        description="Output only. The URL of the user's profile photo. The URL might be temporary or private.",
    )
    websites: Optional[Any] = Field(
        None,
        description="The user's websites. The maximum allowed data size for this field is 2KB.",
    )


class Users(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'admin#directory#users', description='Kind of resource this is.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token used to access next page of this result.'
    )
    trigger_event: Optional[str] = Field(
        None,
        description='Event that triggered this response (only used in case of Push Response)',
    )
    users: Optional[List[User]] = Field(None, description='A list of user objects.')


class BatchCreatePrintServersRequest(BaseModel):
    requests: Optional[List[CreatePrintServerRequest]] = Field(
        None,
        description='Required. A list of `PrintServer` resources to be created (max `50` per batch).',
    )


class BatchCreatePrintersRequest(BaseModel):
    requests: Optional[List[CreatePrinterRequest]] = Field(
        None, description='A list of Printers to be created. Max 50 at a time.'
    )


class BatchCreatePrintersResponse(BaseModel):
    failures: Optional[List[FailureInfo]] = Field(
        None,
        description='A list of create failures. Printer IDs are not populated, as printer were not created.',
    )
    printers: Optional[List[Printer]] = Field(
        None,
        description='A list of successfully created printers with their IDs populated.',
    )


class BatchDeletePrintersResponse(BaseModel):
    failedPrinters: Optional[List[FailureInfo]] = Field(
        None, description='A list of update failures.'
    )
    printerIds: Optional[List[str]] = Field(
        None, description='A list of Printer.id that were successfully deleted.'
    )


Privilege.model_rebuild()
